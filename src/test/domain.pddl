(define (domain SOKOBAN)
(:requirements :strips :typing)
(:types case)
(:predicates    (BOXAT ?x)
                (GUARDAT ?x)
                (EMPTY ?x)
                (VOISINDROITE ?x ?y)
                (VOISINGAUCHE ?x ?y)
                (VOISINHAUT ?x ?y)
                (VOISINBAS ?x ?y)
            )
(:action moveUp
    :parameters (?cas1 - case ?cas2 - case)
    :precondition (and (GUARDAT ?cas1) (EMPTY ?cas2) (VOISINHAUT ?cas1 ?cas2))
    :effect (and
        (not (GUARDAT ?cas1))
        (not (EMPTY ?cas2))
        (GUARDAT ?cas2)
        (EMPTY ?cas1)
    )
)
(:action moveDown
    :parameters (?cas1 - case ?cas2 - case)
    :precondition (and (GUARDAT ?cas1) (EMPTY ?cas2) (VOISINBAS ?cas1 ?cas2))
    :effect (and
        (not (GUARDAT ?cas1))
        (not (EMPTY ?cas2))
        (EMPTY ?cas1)
        (GUARDAT ?cas2)
    )
)
(:action moveRight
    :parameters (?cas1 - case ?cas2 - case)
    :precondition (and (GUARDAT ?cas1) (EMPTY ?cas2) (VOISINDROITE ?cas1 ?cas2))
    :effect (and
        (not (GUARDAT ?cas1))
        (not (EMPTY ?cas2))
        (GUARDAT ?cas2)
        (EMPTY ?cas1)
    )
)
(:action moveLeft
    :parameters (?cas1 - case ?cas2 - case)
    :precondition (and (GUARDAT ?cas1) (EMPTY ?cas2) (VOISINGAUCHE ?cas1 ?cas2))
    :effect (and
        (not (GUARDAT ?cas1))
        (not (EMPTY ?cas2))
        (GUARDAT ?cas2)
        (EMPTY ?cas1)
    )
)
(:action pushUp
    :parameters (?cas1 - case ?cas2 - case ?cas3 - case)
    :precondition (and (GUARDAT ?cas1) (BOXAT ?cas2) (VOISINHAUT ?cas1 ?cas2) (VOISINHAUT ?cas2 ?cas3) (EMPTY ?cas3))
    :effect (and
        (not (GUARDAT ?cas1))
        (not (EMPTY ?cas3))
        (GUARDAT ?cas2)
        (EMPTY ?cas1)
        (BOXAT ?cas3)
        (not (EMPTY ?cas2))
        (not (BOXAT ?cas2))
    )
)
(:action pushDown
    :parameters (?cas1 - case ?cas2 - case ?cas3 - case)
    :precondition (and (GUARDAT ?cas1) (BOXAT ?cas2) (VOISINBAS ?cas1 ?cas2) (VOISINBAS ?cas2 ?cas3) (EMPTY ?cas3))
    :effect (and
        (not (GUARDAT ?cas1))
        (not (EMPTY ?cas3))
        (GUARDAT ?cas2)
        (EMPTY ?cas1)
        (BOXAT ?cas3)
        (not (EMPTY ?cas2))
        (not (BOXAT ?cas2))
    )
)
(:action pushRight
    :parameters (?cas1 - case ?cas2 - case ?cas3 - case)
    :precondition (and (GUARDAT ?cas1) (BOXAT ?cas2) (VOISINDROITE ?cas1 ?cas2) (VOISINDROITE ?cas2 ?cas3) (EMPTY ?cas3))
    :effect (and
        (not (GUARDAT ?cas1))
        (not (EMPTY ?cas3))
        (GUARDAT ?cas2)
        (EMPTY ?cas1)
        (BOXAT ?cas3)
        (not (EMPTY ?cas2))
        (not (BOXAT ?cas2))
    )
)
(:action pushLeft
    :parameters (?cas1 - case ?cas2 - case ?cas3 - case)
    :precondition (and (GUARDAT ?cas1) (BOXAT ?cas2) (VOISINGAUCHE ?cas1 ?cas2) (VOISINGAUCHE ?cas2 ?cas3) (EMPTY ?cas3))
    :effect (and
        (not (GUARDAT ?cas1))
        (not (EMPTY ?cas3))
        (GUARDAT ?cas2)
        (EMPTY ?cas1)
        (BOXAT ?cas3)
        (not (EMPTY ?cas2))
        (not (BOXAT ?cas2))
    )
)
)


